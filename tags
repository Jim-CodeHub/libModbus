!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	demo/Makefile	/^CC 		    = avr-gcc$/;"	m
CFLAGS	demo/Makefile	/^CFLAGS 		= -mmcu=$(MCU) -Werror -Wall -Os -std=c99 -D F_CPU=$(F_CPU)$/;"	m
ERR_ILLSTATE	modbcd/modbcd.h	/^    ERR_ILLSTATE,               											\/**< protocol stack in illegal state  *\/$/;"	e	enum:__anon7
ERR_INVAL	modbcd/modbcd.h	/^    ERR_INVAL,                  											\/**< illegal argument				  *\/$/;"	e	enum:__anon7
ERR_NOERR	modbcd/modbcd.h	/^    ERR_NOERR,																\/**< no error						  *\/$/;"	e	enum:__anon7
ERR_NORES	modbcd/modbcd.h	/^    ERR_NORES,                  											\/**< insufficient resources			  *\/$/;"	e	enum:__anon7
ERR_PORTERR	modbcd/modbcd.h	/^    ERR_PORTERR,                											\/**< porting layer error			  *\/$/;"	e	enum:__anon7
ERR_TIMEDOUT	modbcd/modbcd.h	/^    ERR_TIMEDOUT                											\/**< timeout error occurred			  *\/$/;"	e	enum:__anon7
EV_FRAME_RECEIVED	modbcd/modbcd.h	/^    EV_FRAME_RECEIVED,      											    \/**< Frame received					  *\/$/;"	e	enum:__anon4
EV_READY	modbcd/modbcd.h	/^    EV_READY,															    \/**< Startup finished				  *\/$/;"	e	enum:__anon4
EV_TIME_OUT	modbcd/modbcd.h	/^	EV_TIME_OUT																\/**< Response timeout				  *\/$/;"	e	enum:__anon4
E_FUSE_BIT	demo/Makefile	/^E_FUSE_BIT 	= 0XFF #0XD4$/;"	m
F_CPU	demo/Makefile	/^F_CPU 		= 16000000UL$/;"	m
H_FUSE_BIT	demo/Makefile	/^H_FUSE_BIT 	= 0XC9 #0XC1$/;"	m
ISR	demo/port.c	/^ISR( TIMER1_OVF_vect )$/;"	f
ISR	demo/port.c	/^ISR(TIMER3_OVF_vect)$/;"	f
ISR	demo/port.c	/^ISR(USART1_RX_vect)$/;"	f
ISR	demo/port.c	/^ISR(USART1_UDRE_vect) \/**< Use UDRE IE instead of TX IE (USART1_TX_vect) to speed up trans *\/$/;"	f
ISR	demo/port_style2.c	/^ISR(TIMER2_OVF_vect) \/\/Common timer$/;"	f
ISR	demo/port_style2.c	/^ISR(USART1_RX_vect)$/;"	f
ISR	demo/port_style2.c	/^ISR(USART1_UDRE_vect) \/**< Use UDRE IE instead of TX IE (USART1_TX_vect) to speed up trans *\/$/;"	f
LDFLAGS	demo/Makefile	/^LDFLAGS 	= -mmcu=$(MCU) -Wl,-Map=$(TARGET).map$/;"	m
L_FUSE_BIT	demo/Makefile	/^L_FUSE_BIT 	= 0X2E$/;"	m
MBCD_ADDR_BROADCAST	modbcd/modbcd.h	53;"	d
MBCD_ADDR_SLAVE_MAX	modbcd/modbcd.h	55;"	d
MBCD_ADDR_SLAVE_MIN	modbcd/modbcd.h	54;"	d
MBCD_ATOMIC_OPERATION	modbcd/util/mbcd_box.h	36;"	d
MBCD_EVENT_MAX	modbcd/util/mbcd_box.h	33;"	d
MBCD_FRAME_OFFS_ADDR	modbcd/modbcd.h	46;"	d
MBCD_FRAME_OFFS_CODE	modbcd/modbcd.h	47;"	d
MBCD_FRAME_OFFS_DATA	modbcd/modbcd.h	48;"	d
MBCD_FRAME_OFFS_PDU	modbcd/modbcd.h	49;"	d
MBCD_FRAME_SIZE_CRC	modbcd/modbcd.h	45;"	d
MBCD_FRAME_SIZE_MAX	modbcd/modbcd.h	43;"	d
MBCD_FRAME_SIZE_MIN	modbcd/modbcd.h	44;"	d
MCU	demo/Makefile	/^MCU 		= atmega128$/;"	m
MJR_VER	demo/Makefile	/^MJR_VER		= ATmega128$/;"	m
OBJCOPY	demo/Makefile	/^OBJCOPY 	= avr-objcopy$/;"	m
OBJDUMP	demo/Makefile	/^OBJDUMP 	= avr-objdump$/;"	m
OBJS	demo/Makefile	/^OBJS		= main.o port_style2.o mbcrc.o$/;"	m
PARITY_EVEN	modbcd/modbcd.h	/^    PARITY_EVEN																\/**< Even parity					  *\/$/;"	e	enum:__anon5
PARITY_NONE	modbcd/modbcd.h	/^    PARITY_NONE,															\/**< No parity						  *\/$/;"	e	enum:__anon5
PARITY_ODD	modbcd/modbcd.h	/^    PARITY_ODD,																\/**< Odd parity						  *\/$/;"	e	enum:__anon5
PROGRAMMER	demo/Makefile	/^PROGRAMMER 	= usbasp$/;"	m
PROJECT	demo/Makefile	/^PROJECT		= AVR$/;"	m
RX_STATE_ERRS	modbcd/modbcd.h	/^	RX_STATE_ERRS,															\/**< Receive state errors occur		  *\/$/;"	e	enum:__anon2
RX_STATE_IDLE	modbcd/modbcd.h	/^	RX_STATE_IDLE,															\/**< Receive state idle				  *\/$/;"	e	enum:__anon2
RX_STATE_INIT	modbcd/modbcd.h	/^	RX_STATE_INIT,															\/**< Receive state init				  *\/	$/;"	e	enum:__anon2
RX_STATE_RCVC	modbcd/modbcd.h	/^	RX_STATE_RCVC,															\/**< Receive state receiving character*\/$/;"	e	enum:__anon2
TARGET	demo/Makefile	/^TARGET 		= $(PROJECT)_$(MJR_VER)$/;"	m
TIMER_RSP	modbcd/modbcd.h	/^	TIMER_RSP																\/**< Response Timer					  *\/$/;"	e	enum:__anon6
TIMER_T35	modbcd/modbcd.h	/^	TIMER_T35,																\/**< T35 Timer						  *\/$/;"	e	enum:__anon6
TX_STATE_IDLE	modbcd/modbcd.h	/^	TX_STATE_IDLE,															\/**< Transmit state idle			  *\/$/;"	e	enum:__anon3
TX_STATE_SNDC	modbcd/modbcd.h	/^	TX_STATE_SNDC,															\/**< Transmit state sending character *\/$/;"	e	enum:__anon3
_MBCD_BOX_H__	modbcd/util/mbcd_box.h	10;"	d
_MBCD_CRC_H__	modbcd/util/mbcd_crc.h	11;"	d
_MODBCD_H__	modbcd/modbcd.h	16;"	d
_SREG	demo/port.c	/^static uint8_t	_SREG;	\/**< For Enter & Exit critical *\/$/;"	v	file:
_SREG	demo/port_style2.c	/^static uint8_t	_SREG;	\/**< For Enter & Exit critical *\/$/;"	v	file:
aucCRCHi	demo/mbcrc.c	/^static const PROGMEM uint8_t aucCRCHi[] = {$/;"	v	file:
aucCRCHi	modbcd/util/mbcd_crc.c	/^static const uint8_t aucCRCHi[] = {$/;"	v	file:
aucCRCLo	demo/mbcrc.c	/^static const PROGMEM uint8_t aucCRCLo[] = {$/;"	v	file:
aucCRCLo	modbcd/util/mbcd_crc.c	/^static const uint8_t aucCRCLo[] = {$/;"	v	file:
bTimerRspSwitch	demo/port_style2.c	/^static bool		  bTimerRspSwitch = false;$/;"	v	file:
bTimerT35Switch	demo/port_style2.c	/^static bool		  bTimerT35Switch = false;$/;"	v	file:
eMBCD_Disable	modbcd/modbcd.c	/^eMBCD_ErrorCode eMBCD_Disable( void )$/;"	f
eMBCD_Enable	modbcd/modbcd.c	/^eMBCD_ErrorCode eMBCD_Enable( void )$/;"	f
eMBCD_ErrorCode	modbcd/modbcd.h	/^} eMBCD_ErrorCode;$/;"	t	typeref:enum:__anon7
eMBCD_EventType	modbcd/modbcd.h	/^} eMBCD_EventType;$/;"	t	typeref:enum:__anon4
eMBCD_Init	modbcd/modbcd.c	/^eMBCD_ErrorCode eMBCD_Init( uint8_t ucPort, uint32_t ulBaudRate, eMBCD_Parity eParity, uint16_t usTimerRsp_1Ms ) $/;"	f
eMBCD_Load	modbcd/modbcd.c	/^eMBCD_ErrorCode eMBCD_Load( uint8_t **pucPDU, uint16_t *pusLeng )$/;"	f
eMBCD_Parity	modbcd/modbcd.h	/^} eMBCD_Parity;$/;"	t	typeref:enum:__anon5
eMBCD_RcvState	modbcd/modbcd.h	/^} eMBCD_RcvState;$/;"	t	typeref:enum:__anon2
eMBCD_Send	modbcd/modbcd.c	/^eMBCD_ErrorCode eMBCD_Send( uint8_t ucSlaveAddress, uint8_t ucFunctionCode, const void *pucData, uint16_t usLength )$/;"	f
eMBCD_SndState	modbcd/modbcd.h	/^} eMBCD_SndState;$/;"	t	typeref:enum:__anon3
eMBCD_Timer	modbcd/modbcd.h	/^} eMBCD_Timer;$/;"	t	typeref:enum:__anon6
eMBEvnRx	modbcd/modbcd.c	/^static			eMBCD_EventType			eMBEvnRx;								\/**< Modbcd Rx Event type		 *\/	$/;"	v	file:
eMBEvnTx	modbcd/modbcd.c	/^static			eMBCD_EventType			eMBEvnTx;								\/**< Modbcd Tx Event type		 *\/$/;"	v	file:
eRcvState	modbcd/modbcd.c	/^static volatile eMBCD_RcvState			eRcvState;								\/**< Modbcd recv state			  *\/$/;"	v	file:
eSndState	modbcd/modbcd.c	/^static volatile eMBCD_SndState			eSndState = TX_STATE_IDLE;				\/**< Modbcd send state			  *\/$/;"	v	file:
main	demo/main.c	/^int main(void)$/;"	f
msg	modbcd/util/mbcd_box.h	/^typedef struct { void *msg; } tMBCD_Event;$/;"	m	struct:__anon1
pMBMsgRx	modbcd/modbcd.c	/^static			tMBCD_Event				pMBMsgRx;								\/**< Modbcd Rx message identity  *\/$/;"	v	file:
pMBMsgTx	modbcd/modbcd.c	/^static			tMBCD_Event				pMBMsgTx;								\/**< Modbcd Tx message identity  *\/$/;"	v	file:
pvMBCD_BoxAccept	modbcd/util/mbcd_box.c	/^void	*pvMBCD_BoxAccept( tMBCD_Event *boxID )$/;"	f
tMBCD_Event	modbcd/util/mbcd_box.h	/^typedef struct { void *msg; } tMBCD_Event;$/;"	t	typeref:struct:__anon1
ucFrameBuff	modbcd/modbcd.c	/^static volatile uint8_t					ucFrameBuff[MBCD_FRAME_SIZE_MAX];		\/**< Modbcd frame buffer          *\/$/;"	v	file:
ucMBSlaveAddr	modbcd/modbcd.c	/^static volatile uint8_t					ucMBSlaveAddr;							\/**< Modbcd Address field value   *\/$/;"	v	file:
ucMBSwitch	modbcd/modbcd.c	/^static volatile uint8_t					ucMBSwitch = false;						\/**< Modbcd enable or disable     *\/$/;"	v	file:
usFrameIndx	modbcd/modbcd.c	/^static volatile uint16_t				usFrameIndx = 0;						\/**< Modbcd frame buffer Index	  *\/$/;"	v	file:
usFrameLeng	modbcd/modbcd.c	/^static volatile uint16_t				usFrameLeng = 0;						\/**< Mddbcd frame buffer length   *\/$/;"	v	file:
usMBCD_CRC16	demo/mbcrc.c	/^usMBCD_CRC16( uint8_t * pucFrame, uint16_t usLen )$/;"	f
usMBCD_CRC16	modbcd/util/mbcd_crc.c	/^usMBCD_CRC16( uint8_t * pucFrame, uint16_t usLen )$/;"	f
usTimer1TCNTDelta	demo/port.c	/^static uint16_t   usTimer1TCNTDelta;$/;"	v	file:
usTimer3TCNTDelta	demo/port.c	/^static uint16_t   usTimer3TCNTDelta;$/;"	v	file:
usTimerRspCnt	demo/port_style2.c	/^static uint16_t   usTimerRspCnt = 0;$/;"	v	file:
usTimerRspVal	demo/port_style2.c	/^static uint16_t   usTimerRspVal = 0;$/;"	v	file:
usTimerT35Cnt	demo/port_style2.c	/^static uint16_t   usTimerT35Cnt = 0;$/;"	v	file:
usTimerT35Val	demo/port_style2.c	/^static uint16_t   usTimerT35Val = 0;$/;"	v	file:
vMBCD_BoxPost	modbcd/util/mbcd_box.c	/^void	vMBCD_BoxPost( tMBCD_Event *boxID, void *msg )$/;"	f
vMBCD_EnterCritical	demo/port.c	/^void vMBCD_EnterCritical( void )	{_SREG = SREG; __asm__ volatile("cli");}$/;"	f
vMBCD_EnterCritical	demo/port_style2.c	/^void vMBCD_EnterCritical( void )	{_SREG = SREG; __asm__ volatile("cli");}$/;"	f
vMBCD_Exit_Critical	demo/port.c	/^void vMBCD_Exit_Critical( void )	{SREG = _SREG;}	$/;"	f
vMBCD_Exit_Critical	demo/port_style2.c	/^void vMBCD_Exit_Critical( void )	{SREG = _SREG;}	$/;"	f
vMBCD_PortSerialEnable	demo/port.c	/^void vMBCD_PortSerialEnable( bool xRxEnable, bool xTxEnable )$/;"	f
vMBCD_PortSerialEnable	demo/port_style2.c	/^void vMBCD_PortSerialEnable( bool xRxEnable, bool xTxEnable )$/;"	f
vMBCD_PortTimersDisable	demo/port.c	/^inline void vMBCD_PortTimersDisable( eMBCD_Timer eTimer )$/;"	f
vMBCD_PortTimersDisable	demo/port_style2.c	/^inline void vMBCD_PortTimersDisable( eMBCD_Timer eTimer )$/;"	f
vMBCD_PortTimersEnable	demo/port.c	/^inline void vMBCD_PortTimersEnable( eMBCD_Timer eTimer )$/;"	f
vMBCD_PortTimersEnable	demo/port_style2.c	/^inline void vMBCD_PortTimersEnable( eMBCD_Timer eTimer )$/;"	f
vMBCD_ReceiveFSM	modbcd/modbcd.c	/^void vMBCD_ReceiveFSM( void )$/;"	f
vMBCD_TimerRspExpired	modbcd/modbcd.c	/^void vMBCD_TimerRspExpired( void )$/;"	f
vMBCD_TimerT35Expired	modbcd/modbcd.c	/^void vMBCD_TimerT35Expired( void )$/;"	f
vMBCD_TransmitFSM	modbcd/modbcd.c	/^void vMBCD_TransmitFSM( void )$/;"	f
xMBCD_PortSerialGetByte	demo/port.c	/^bool xMBCD_PortSerialGetByte( int8_t * pucByte )$/;"	f
xMBCD_PortSerialGetByte	demo/port_style2.c	/^bool xMBCD_PortSerialGetByte( int8_t * pucByte )$/;"	f
xMBCD_PortSerialInit	demo/port.c	/^bool xMBCD_PortSerialInit( uint8_t ucPORT, uint32_t ulBaudRate, uint8_t ucDataBits, eMBCD_Parity eParity )$/;"	f
xMBCD_PortSerialInit	demo/port_style2.c	/^bool xMBCD_PortSerialInit( uint8_t ucPORT, uint32_t ulBaudRate, uint8_t ucDataBits, eMBCD_Parity eParity )$/;"	f
xMBCD_PortSerialPutByte	demo/port.c	/^bool xMBCD_PortSerialPutByte( int8_t ucByte )$/;"	f
xMBCD_PortSerialPutByte	demo/port_style2.c	/^bool xMBCD_PortSerialPutByte( int8_t ucByte )$/;"	f
xMBCD_PortTimersInit	demo/port.c	/^bool xMBCD_PortTimersInit( uint16_t usTimerT35_50us, uint16_t usTimerRsp_1Ms )$/;"	f
xMBCD_PortTimersInit	demo/port_style2.c	/^bool xMBCD_PortTimersInit( uint16_t usTimerT35_50us, uint16_t usTimerRsp_1Ms )$/;"	f
